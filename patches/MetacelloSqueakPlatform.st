'From Squeak4.4 of 30 June 2013 [latest update: #12336] on 23 July 2014 at 5:35:23 pm'!MetacelloPlatform subclass: #MetacelloSqueakPlatform	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Metacello-Platform'!!MetacelloSqueakPlatform methodsFor: 'utilities' stamp: 'dkh 6/12/2012 10:18:46.076'!authorName	^Utilities authorInitials! !!MetacelloSqueakPlatform methodsFor: 'utilities' stamp: 'dkh 6/12/2012 10:18:46.076'!authorName: aString	^Utilities setAuthorInitials: aString! !!MetacelloSqueakPlatform methodsFor: 'utilities' stamp: 'dkh 6/12/2012 10:18:46.076'!timestamp	^Date today mmddyyyy, ' ',			((String streamContents: [:s | Time now print24: true on: s]) copyFrom: 1 to: 5)! !!MetacelloSqueakPlatform methodsFor: 'reflection' stamp: 'dkh 6/12/2012 10:18:46.076'!copyClass: oldClass as: newName inCategory: newCategoryName	| copysName class newDefinition |	copysName := newName asSymbol.	copysName = oldClass name		ifTrue: [ ^ oldClass ].	(Smalltalk includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := oldClass definition copyReplaceAll: '#' , oldClass name asString with: '#' , copysName asString printString.	newDefinition := newDefinition		copyReplaceAll: 'category: ' , (SystemOrganization categoryOfElement: oldClass name) asString printString		with: 'category: ' , newCategoryName printString.	class := Compiler evaluate: newDefinition logged: true.	class class instanceVariableNames: oldClass class instanceVariablesString.	class copyAllCategoriesFrom: oldClass.	class class copyAllCategoriesFrom: oldClass class.	class category: newCategoryName.	^ class! !!MetacelloSqueakPlatform methodsFor: 'reflection' stamp: 'dkh 6/12/2012 10:18:46.076'!globalNamed: globalName	^Smalltalk at: globalName! !!MetacelloSqueakPlatform methodsFor: 'reflection' stamp: 'dkh 6/12/2012 10:18:46.076'!globalNamed: globalName ifAbsent: absentBlock	^Smalltalk at: globalName ifAbsent: absentBlock! !!MetacelloSqueakPlatform methodsFor: 'repository creation' stamp: 'dkh 6/12/2012 10:18:46.076'!createRepository: aRepositorySpec 	| type |	type := aRepositorySpec type.	type = 'ftp'		ifTrue: [| description headerSize index host directory |			description := aRepositorySpec description.			headerSize := 'ftp://' size.			index := description indexOf: $/ startingAt: headerSize + 1.			host := description copyFrom: headerSize + 1 to: index - 1.			directory := description copyFrom: index + 1 to: description size.			^ MCFtpRepository				host: host				directory: directory				user: aRepositorySpec username				password: aRepositorySpec password].	^ super createRepository: aRepositorySpec! !!MetacelloSqueakPlatform methodsFor: 'repository creation' stamp: 'dkh 6/12/2012 10:18:46.076'!extractTypeFromDescription: description 	(description beginsWith: 'ftp://')		ifTrue: [^ 'ftp'].	^ super extractTypeFromDescription: description! !!MetacelloSqueakPlatform methodsFor: 'attributes' stamp: 'dkh 3/21/2013 14:01'!defaultPlatformAttributes	| attributes versionString |	attributes := OrderedCollection with: #squeakCommon with: #squeak.	Smalltalk		at: #SystemVersion		ifPresent: [:cl | 			versionString := cl current version.			(versionString beginsWith: 'Squeak3.10')				ifTrue: [attributes add: #'squeak3.10.x'].			(versionString beginsWith: 'Squeak4')				ifTrue: [attributes add: #'squeak4.x'.					(versionString beginsWith: 'Squeak4.1')						ifTrue: [attributes add: #'squeak4.1.x']						ifFalse: [(versionString beginsWith: 'Squeak4.2')								ifTrue: [attributes add: #'squeak4.2.x']								ifFalse: [(versionString beginsWith: 'Squeak4.3')									ifTrue: [attributes add: #'squeak4.3.x']									ifFalse: [(versionString beginsWith: 'Squeak4.4')										ifTrue: [attributes add: #'squeak4.4.x']											ifFalse: [(versionString beginsWith: 'Squeak4.5')												ifTrue: [attributes add: #'squeak4.5.x']]]]]]].	^ attributes! !!MetacelloSqueakPlatform methodsFor: 'notification' stamp: 'dkh 6/12/2012 10:18:46.076'!collection: aCollection do: aBlock displaying: aString	self bypassProgressBars ifTrue: [ ^super collection: aCollection do: aBlock displaying: aString ].	aCollection 		do: aBlock		displayingProgress: aString! !!MetacelloSqueakPlatform methodsFor: 'notification' stamp: 'dkh 6/12/2012 10:18:46.076'!do: aBlock displaying: aString	self bypassProgressBars ifTrue: [ ^super do: aBlock displaying: aString ].	aString		displayProgressAt: Sensor cursorPoint		from: 0 to: 2		during: [:bar |			bar value: 1.			aBlock value.			bar value: 2 ]! !!MetacelloSqueakPlatform methodsFor: 'github support' stamp: 'mt 12/2/2013 13:55:22.738'!downloadFile: url to: outputFileName    | archive zipfile |	SmalltalkImage current platformName asLowercase = 'win32'		ifTrue: [self downloadWin32File: url to: outputFileName]		ifFalse: [self downloadUnixFile: url to: outputFileName].    archive := ZipArchive new.    zipfile := FileDirectory on: outputFileName.    zipfile containingDirectory readOnlyFileNamed: zipfile localName do: [ :fileStream | archive readFrom: fileStream ].    ^ archive! !!MetacelloSqueakPlatform methodsFor: 'github support' stamp: 'mt 11/14/2013 10:22:09.757'!downloadUnixFile: url to: outputFileName   | in out err proc archive zipfile |   in := (' -L ' , url) readStream.   out := FileStream forceNewFileNamed: outputFileName.   err := FileStream forceNewFileNamed: '/tmp/curl.err'.   proc := OSProcess thisOSProcess       forkJob: '/usr/bin/curl'       arguments:           {'-L'.           url}       environment: nil       descriptors: (Array with: nil with: out with: err).   proc ifNil: [ OSProcess noAccessorAvailable ].   [ proc isRunning ] whileTrue: [ (Delay forMilliseconds: 100) wait ].   out close.   err close.!]style[(17 1 3 1 3 1 14 7 2 1 3 1 3 1 4 1 7 1 7 6 2 5 6 3 3 17 3 4 10 20 14 5 3 4 10 20 15 5 4 4 9 31 15 31 4 13 3 22 3 22 5 7 3 7 3 7 3 6 4 10 9 29 4 27 5 18 3 13 3 11 3 7)cblack;b,cblack;,c000000126,cblack;,cblack;b,cblack;,c000000126,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,cmagenta;,cblack;,c000000126,cblack;,c106106106,cblack;,c000000126b,cblack;,c000000126,cblack;,c106106106,cblack;,c000000126b,cblack;,cmagenta;,cblack;,c106106106,cblack;,c000000126b,cblack;,cmagenta;,cblack;,cmagenta;,cblack;,c000000126,cblack;,c000126126b,cblack;,c000000126b,cblack;,c000126126b,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c000000126b,cblack;,c106106106,cblack;,c000000126b,cblack;,c126000126,cblack;,c106106106,cblack;,c106106106,cblack;! !!MetacelloSqueakPlatform methodsFor: 'github support' stamp: 'mt 11/14/2013 10:21:25.758'!downloadWin32File: url to: outputFileName	self ffiWin32Command: (('curl -L ', url, ' > ', outputFileName)		withSqueakLineEndings copyReplaceAll: String cr with: ' ').!]style[(18 1 3 1 3 1 14 3 4 20 10 2 3 2 5 2 14 42 6 10 3 2)cblack;b,cblack;,c000000126,cblack;,cblack;b,cblack;,c000000126,cblack;,c000126126b,cblack;,cmagenta;,cblack;,c000000126,cblack;,cmagenta;,cblack;,c000000126,cblack;,c000000126b,cblack;,cmagenta;,cblack;! !!MetacelloSqueakPlatform methodsFor: 'github support' stamp: 'mt 11/14/2013 10:34:15.415'!extractRepositoryFrom: zipFile to: directory	SmalltalkImage current platformName asLowercase = 'win32'		ifTrue: [self extractWin32RepositoryFrom: zipFile to: directory]		ifFalse: [self extractUnixRepositoryFrom: zipFile to: directory].!]style[(22 1 7 1 3 1 9 3 14 36 7 12 4 29 7 5 9 14 4 28 7 5 9 2)cblack;b,cblack;,c000000126,cblack;,cblack;b,cblack;,c000000126,cblack;,c000000126b,cblack;,cmagenta;,cblack;,c000126126b,cblack;,c000000126,cblack;,c000000126,cblack;,c000126126b,cblack;,c000000126,cblack;,c000000126,cblack;! !!MetacelloSqueakPlatform methodsFor: 'github support' stamp: 'mt 11/14/2013 10:30:46.029'!extractUnixRepositoryFrom: zipFile to: directory    "unzip <zipFile> into <directory>"    | out err proc errorMessage |    out := FileStream forceNewFileNamed: '/tmp/zip.out'.    err := FileStream forceNewFileNamed: '/tmp/zip.err'.    errorMessage := ''.    [     proc := OSProcess thisOSProcess        forkJob: '/usr/bin/unzip'        arguments:            {'-u'.            zipFile.            '-d'.            directory}        environment: nil        descriptors: (Array with: nil with: out with: err).    proc ifNil: [ self noAccessorAvailable ].    [ proc isRunning ] whileTrue: [ (Delay forMilliseconds: 100) wait ] ]        ensure: [             out close.            err close ].    FileStream        fileNamed: '/tmp/zip.err'        do: [ :fileStream |             (errorMessage := fileStream contentsOfEntireFile) notEmpty                ifTrue: [ self error: 'unzip failure: ' , errorMessage printString ] ]!]style[(26 1 7 1 3 1 9 5 34 8 3 1 3 1 4 1 12 7 3 4 10 20 14 6 3 4 10 20 14 6 12 4 2 13 4 4 9 32 16 33 4 14 7 14 4 14 9 23 3 23 5 7 3 7 3 7 3 7 4 10 4 30 4 27 5 18 3 42 3 20 3 14 10 20 14 16 10 17 12 4 10 58 4 8 17 3 12 16)cblack;b,cblack;,c000000126,cblack;,cblack;b,cblack;,c000000126,cblack;,c000126000FBitmap Segoe UI#15,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c000000126b,cblack;,cmagenta;,cblack;,c106106106,cblack;,c000000126b,cblack;,cmagenta;,cblack;,c106106106,cblack;,cmagenta;,cblack;,c106106106,cblack;,c000000126b,cblack;,cmagenta;,cblack;,cmagenta;,cblack;,c000000126,cblack;,cmagenta;,cblack;,c000000126,cblack;,c000126126b,cblack;,c000000126b,cblack;,c000126126b,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c000126126b,cblack;,c106106106,cblack;,c000000126b,cblack;,c126000126,cblack;,c106106106,cblack;,c106106106,cblack;,c000000126b,cblack;,cmagenta;,cblack;,c126126000,cblack;,c106106106,cblack;,c126126000,cblack;,c000126126b,cblack;,cmagenta;,cblack;,c106106106,cblack;! !!MetacelloSqueakPlatform methodsFor: 'github support' stamp: 'mt 11/14/2013 10:32:11.098'!extractWin32RepositoryFrom: zipFile to: directory    self ffiWin32Command: (('unzip -u ', zipFile, ' -d ', directory)		withSqueakLineEndings copyReplaceAll: String cr with: ' ').!]style[(27 1 7 1 3 1 9 6 4 20 11 2 7 2 6 2 9 42 6 10 3 2)cblack;b,cblack;,c000000126,cblack;,cblack;b,cblack;,c000000126,cblack;,c000126126b,cblack;,cmagenta;,cblack;,c000000126,cblack;,cmagenta;,cblack;,c000000126,cblack;,c000000126b,cblack;,cmagenta;,cblack;! !!MetacelloSqueakPlatform methodsFor: 'github support' stamp: 'mt 11/14/2013 10:19:06.451'!ffiWin32Command: aCommand        <apicall: long 'system' ( char* ) module: 'msvcrt.dll'>        ^ self externalCallFailed!]style[(16 1 8 10 8 6 8 11 7 1 12 10 1 1 4 19)cblack;b,cblack;,c000000126,cblack;,cgray;,cblack;,cmagenta;,cblack;,cgray;,cblack;,cmagenta;,cblack;,cblack;b,cblack;,c000126126b,cblack;! !!MetacelloSqueakPlatform methodsFor: 'file system' stamp: 'mt 12/2/2013 13:37:06.999'!directoryFromPath: adirectoryPath relativeTo: anotherDirectoryPath	^ super directoryFromPath: (		(adirectoryPath endsWith: #/)			ifTrue: [adirectoryPath allButLast "avoid substitution with # under win32"]			ifFalse: [adirectoryPath]) relativeTo: anotherDirectoryPath!]style[(18 1 14 1 11 1 20 3 1 1 5 25 14 11 2 14 14 12 39 15 14 15 20)cblack;b,cblack;,c000000126,cblack;,cblack;b,cblack;,c000000126,cblack;,cblack;b,cblack;,c000126126b,cblack;,c000000126,cblack;,c126000126,cblack;,c000000126,cblack;,c000126000FBitmap Segoe UI#15,cblack;,c000000126,cblack;,c000000126! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MetacelloSqueakPlatform class	instanceVariableNames: ''!!MetacelloSqueakPlatform class methodsFor: 'initialize-release' stamp: 'dkh 6/12/2012 10:18:46.076'!initialize  self select! !MetacelloSqueakPlatform initialize!
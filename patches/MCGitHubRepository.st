'From Squeak4.4 of 30 June 2013 [latest update: #12336] on 23 July 2014 at 5:35:06 pm'!MCFileTreeRepository subclass: #MCGitHubRepository	instanceVariableNames: 'projectPath projectVersion repoPath'	classVariableNames: 'CacheDirectory DownloadCache'	poolDictionaries: ''	category: 'Metacello-GitHub'!!MCGitHubRepository methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!asRepositorySpecFor: aMetacelloMCProject    ^ aMetacelloMCProject repositorySpec        description: self description;        type: 'github';        yourself! !!MCGitHubRepository methodsFor: 'accessing' stamp: 'dkh 07/01/2013 13:23'!directory  directory    ifNil: [       directory := self class        projectDirectoryFrom: self projectPath        version: self projectVersion.      self repoPath        ifNotNil: [           directory := MetacelloPlatform current            directoryFromPath: self repoPath            relativeTo: directory ] ]    ifNotNil: [       (MCFileTreeFileUtils current directoryExists: directory)        ifFalse: [           self flushCache.          ^ self directory ] ].  ^ directory! !!MCGitHubRepository methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!metacelloProjectClassFor: aScriptEngine    ^ MetacelloMCBaselineProject! !!MCGitHubRepository methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!projectPath    ^ projectPath! !!MCGitHubRepository methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!projectPath: anObject    projectPath := anObject! !!MCGitHubRepository methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!projectVersion    (projectVersion == nil or: [ projectVersion isEmpty ])        ifTrue: [ projectVersion := 'master' ].    ^ projectVersion! !!MCGitHubRepository methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!projectVersion: anObject    projectVersion := anObject! !!MCGitHubRepository methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!repoPath    ^ repoPath! !!MCGitHubRepository methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!repoPath: anObject    repoPath := anObject! !!MCGitHubRepository methodsFor: 'descriptions' stamp: 'dkh 5/16/2012 14:52:41'!description    | desc |    desc := self class description , self projectPath , ':' , self projectVersion.    self repoPath ifNil: [ ^ desc ].    ^ desc , '/' , self repoPath! !!MCGitHubRepository methodsFor: 'descriptions' stamp: 'dkh 6/16/2012 09:03'!directoryDescription    ^ self directory pathName! !!MCGitHubRepository methodsFor: 'initialize-release' stamp: 'dkh 6/16/2012 09:11'!flushCache    "the directory acts like a cache since we download the directory from github"    super flushCache.    self class flushDownloadCache.    directory := nil! !!MCGitHubRepository methodsFor: 'initialize-release' stamp: 'dkh 7/24/2012 21:52'!flushForScriptGet    self class flushProjectEntry: self projectPath version: self projectVersion.    directory := nil! !!MCGitHubRepository methodsFor: 'initialize-release' stamp: 'dkh 07/16/2013 20:48'!hasNoLoadConflicts: anMCGitHubRepository  ^ self projectPath = anMCGitHubRepository projectPath    and: [ self repoPath = anMCGitHubRepository repoPath ]! !!MCGitHubRepository methodsFor: 'initialize-release' stamp: 'dkh 6/16/2012 09:09'!initialize    super initialize.    directory := nil.	"we'll lazily create the directory instance"    self readonly: true! !!MCGitHubRepository methodsFor: 'comparing' stamp: 'dkh 6/16/2012 08:57'!hash    ^ self description hash! !!MCGitHubRepository methodsFor: 'testing' stamp: 'dkh 6/16/2012 09:00'!isValid    ^ true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MCGitHubRepository class	instanceVariableNames: ''!!MCGitHubRepository class methodsFor: 'private' stamp: 'dkh 07/12/2013 11:52'!cacheDirectory  self resetCacheDirectoryIfInvalid.  CacheDirectory ifNil: [ CacheDirectory := self defaultCacheDirectory ].  ^ CacheDirectory! !!MCGitHubRepository class methodsFor: 'private' stamp: 'dkh 07/12/2013 11:36'!cacheDirectory: aDirectory  "explicitly set CacheDirectory"  CacheDirectory := aDirectory! !!MCGitHubRepository class methodsFor: 'private' stamp: 'ChristopheDemarey 4/29/2013 15:24'!cacheDirectoryFor: projectPath	| cacheDirectory projectDirectory |		cacheDirectory := self cacheDirectory.	projectDirectory := MetacelloPlatform current directoryFromPath: projectPath relativeTo: cacheDirectory.	MetacelloPlatform current ensureDirectoryExists: projectDirectory.	^ projectDirectory! !!MCGitHubRepository class methodsFor: 'private' stamp: 'dkh 07/12/2013 11:36'!defaultCacheDirectory  | defaultDirectory cacheDirectory |  defaultDirectory := MetacelloPlatform current defaultDirectory.  cacheDirectory := MetacelloPlatform current    directoryFromPath: 'github-cache'    relativeTo: defaultDirectory.  MetacelloPlatform current ensureDirectoryExists: cacheDirectory.  ^ cacheDirectory! !!MCGitHubRepository class methodsFor: 'private' stamp: 'dkh 5/16/2012 14:52:41'!parseLocation: locationUrl version: versionString    "self 	parseLocation: 'github://dalehenrich/MetacelloRepository:master/monticello/repos/itory/path'	version: nil     "    | projectPath projectVersion repoPath headerSize desc projectDelim repoDelim versionDelim |    headerSize := 'github://' size.    desc := locationUrl.    desc := desc copyFrom: headerSize + 1 to: desc size.    projectVersion := repoPath := nil.    projectDelim := desc indexOf: $/.    repoDelim := desc indexOf: $/ startingAt: projectDelim + 1.    (versionDelim := desc indexOf: $:) == 0        ifTrue: [             repoDelim == 0                ifTrue: [ projectPath := desc ]                ifFalse: [                     projectPath := desc copyFrom: 1 to: repoDelim - 1.                    repoPath := desc copyFrom: repoDelim + 1 to: desc size ] ]        ifFalse: [             projectPath := desc copyFrom: 1 to: versionDelim - 1.            repoDelim == 0                ifTrue: [ projectVersion := desc copyFrom: versionDelim + 1 to: desc size ]                ifFalse: [                     projectVersion := desc copyFrom: versionDelim + 1 to: repoDelim - 1.                    repoPath := desc copyFrom: repoDelim + 1 to: desc size ] ].    versionString ~~ nil        ifTrue: [ projectVersion := versionString ].    ^ self new        projectPath: projectPath;        projectVersion: projectVersion;        repoPath: repoPath;        yourself! !!MCGitHubRepository class methodsFor: 'private' stamp: 'dkh 07/12/2013 11:51'!resetCacheDirectoryIfInvalid  "Reset if invalid"  CacheDirectory notNil    and: [       (MCFileTreeFileUtils current directoryExists: CacheDirectory)        ifFalse: [ CacheDirectory := nil ] ]! !!MCGitHubRepository class methodsFor: 'private' stamp: 'mt 12/2/2013 13:22:34.311'!tempDirectory	| tempDirectory |	tempDirectory := SmalltalkImage current platformName asLowercase = 'win32'		ifTrue: [MetacelloPlatform current directoryFromPath: 'tmp' relativeTo: FileDirectory default]		ifFalse: [FileDirectory on: '/tmp'].	MetacelloPlatform current ensureDirectoryExists: tempDirectory.	^ tempDirectory!]style[(13 5 13 4 13 4 14 36 7 12 17 28 5 13 13 22 13 5 6 4 17 32 13 3 1 1 13)cblack;bu,cblack;,c106106106,cblack;,c106106106,cblack;,c000000126b,cblack;,cmagenta;,cblack;,c000000126b,cblack;,cmagenta;,cblack;,c000000126b,cblack;,c000000126b,cblack;,cmagenta;,cblack;,c000000126b,cblack;,c106106106,cblack;,cblack;b,cblack;,c106106106! !!MCGitHubRepository class methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!description    ^ 'github://'! !!MCGitHubRepository class methodsFor: 'accessing' stamp: 'dkh 6/16/2012 08:29'!downloadCache    DownloadCache ifNil: [ DownloadCache := Dictionary new ].    ^ DownloadCache! !!MCGitHubRepository class methodsFor: 'accessing' stamp: 'dkh 7/24/2012 21:50'!downloadCacheKey: projectPath version: versionString    ^ projectPath , ':::' , versionString! !!MCGitHubRepository class methodsFor: 'accessing' stamp: 'dkh 5/16/2012 14:52:41'!isAbstract    "abstract as far as creating new repositories interactively? yes"    ^ true! !!MCGitHubRepository class methodsFor: 'initialization' stamp: 'dkh 6/16/2012 08:25'!flushDownloadCache    "self flushDownloadCache"    DownloadCache := nil! !!MCGitHubRepository class methodsFor: 'initialization' stamp: 'dkh 07/12/2013 11:52'!initialize  "self initialize"  Smalltalk addToStartUpList: self.  self flushDownloadCache.  self resetCacheDirectoryIfInvalid! !!MCGitHubRepository class methodsFor: 'utility' stamp: 'dkh 7/24/2012 21:50'!flushProjectEntry: projectPath version: versionString    self downloadCache removeKey: (self downloadCacheKey: projectPath version: versionString) ifAbsent: [  ]! !!MCGitHubRepository class methodsFor: 'utility' stamp: 'mt 12/2/2013 13:24:25.163'!projectDirectoryFrom: projectPath version: versionString  | mcPlatform githubCacheDirectory projectDirectory downloadCacheKey cachePath |  downloadCacheKey := self downloadCacheKey: projectPath version: versionString.  mcPlatform := MetacelloPlatform current.  githubCacheDirectory := mcPlatform    directoryFromPath: versionString    relativeTo: (self cacheDirectoryFor: projectPath).  cachePath := self downloadCache at: downloadCacheKey ifAbsent: [  ].  (cachePath isNil    or: [       (projectDirectory := mcPlatform        directoryFromPath: cachePath        relativeTo: githubCacheDirectory) exists not ])    ifTrue: [       | url archive directory zipFileName |      MetacelloScriptGitHubDownloadNotification new        projectPath: projectPath;        versionString: versionString;        signal.	"for testing purposes"      mcPlatform ensureDirectoryExists: githubCacheDirectory.      url := 'https://github.com/' , projectPath , '/zipball/' , versionString.      zipFileName := self tempDirectory fullPathFor:        'github-' , (downloadCacheKey select: [ :c | c isAlphaNumeric ]) , '.zip'.      archive := MetacelloPlatform current downloadFile: url to: zipFileName.      directory := mcPlatform        directoryFromPath: (cachePath := archive members first fileName)        relativeTo: githubCacheDirectory.      directory exists        ifFalse: [           MetacelloPlatform current            extractRepositoryFrom: zipFileName            to: githubCacheDirectory fullName ].      self downloadCache at: downloadCacheKey put: cachePath.      projectDirectory := mcPlatform        directoryFromPath: cachePath        relativeTo: githubCacheDirectory ].  ^ projectDirectory!]style[(21 1 11 1 8 1 13 5 10 1 20 1 16 1 16 1 9 5 16 4 4 19 11 10 13 4 10 4 17 12 20 4 10 24 13 18 4 20 11 5 9 4 4 19 16 20 9 25 16 4 10 28 9 21 20 39 3 1 7 1 9 1 11 9 41 26 11 25 13 18 22 7 10 24 20 8 3 4 21 3 11 3 11 3 13 8 11 4 4 36 9 4 16 12 1 3 1 21 6 8 7 4 17 23 3 5 11 8 9 4 10 29 9 4 7 45 20 8 9 38 17 44 11 17 20 19 4 19 16 6 9 8 16 4 10 28 9 21 20 6 1 1 16)cblack;bu,cblack;,c000000126,cblack;,cblack;bu,cblack;,c000000126,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c000126126b,cblack;,c000000126,cblack;,c000000126,cblack;,c106106106,cblack;,c000000126b,cblack;,c106106106,cblack;,c106106106,cblack;,c000000126,cblack;,c000126126b,cblack;,c000000126,cblack;,c106106106,cblack;,c000126126b,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c000000126b,cblack;,c000000126,cblack;,c000000126,cblack;,c000126000FBitmap Segoe UI#15,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,cmagenta;,cblack;,c000000126,cblack;,cmagenta;,cblack;,c000000126,cblack;,c106106106,cblack;,c000126126b,cblack;,cmagenta;,cblack;,c106106106,cblack;,c126126000,cblack;,c126126000,cblack;,cmagenta;,cblack;,c106106106,cblack;,c000000126b,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c000000126b,cblack;,c106106106,cblack;,c106106106,cblack;,c000126126b,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,c106106106,cblack;,cblack;b,cblack;,c106106106! !!MCGitHubRepository class methodsFor: 'instance creation' stamp: 'dkh 5/16/2012 14:52:41'!location: locationUrl    ^ self location: locationUrl version: nil! !!MCGitHubRepository class methodsFor: 'instance creation' stamp: 'dkh 6/16/2012 09:08'!location: locationUrl version: versionString    ^ self parseLocation: locationUrl version: versionString! !!MCGitHubRepository class methodsFor: 'system startup' stamp: 'dkh 6/16/2012 08:24'!startUp: resuming    "Flush the GitHub download cache"    resuming        ifTrue: [ self flushDownloadCache ]! !MCGitHubRepository initialize!